<launch>
    
    <arg name="veh" default="/"/> 
    <!-- arg name="odom_topic" default="loam/loam_odom"/-->
    <!-- arg name="odom_topic" default="/husky_velocity_controller/odom"/--> 
    <arg name="odom_topic" default="/gazebo_odom/odometry"/>
    <arg name="lidar3d_topic" default="velodyne_points"/>
    <arg name="lidar2d_topic" default="scan_from3d"/>

    <arg name="laser_frame_id" default="velodyne"/> <!-- X1/front_laser -->

    <!-- PointCloud preprocess -->
    <arg name="z_min_lidar" default="-5"/>
    <arg name="z_min_laser" default="-0.5"/>

    <!-- Scan to grid maop -->
    <arg name="cell_size" default="0.1"/>
    <arg name="map_length" default="30"/>
    <arg name="sync_time" default="0.2"/>
    <arg name="vehicle_size_map" default="0.35"/>
    <arg name="drift_x" default="0"/> <!-- base_link and velodyne tf -->
    <arg name="drift_y" default="0"/>  
    <arg name="frame_period" default="0.2"/> 

    <!-- Planning -->
    <arg name="update_time" default="0.5"/>
    <arg name="vehicle_size_planning" default="0.8"/>
    <arg name="local_cost" default="3"/>
    <arg name="complete_dis" default="1.0"/>


    <group ns="$(arg veh)">

        <!-- PointCloud preprocess -->
        <remap from="pcl_preprocessing/velodyne_points" to="$(arg lidar3d_topic)"/>
        <include file="$(find pcl_perception)/launch/pcl_preprocessing.launch">
            <arg name="z_min" value="$(arg z_min_lidar)"/>
        </include>

        <!-- Remove ground -->
        <remap from="pcl_ground_segmentation/velodyne_points" to="pcl_preprocessing/velodyne_points_preprocess"/>
        <include file="$(find pcl_perception)/launch/pcl_ground_segmentation.launch">
        </include>

        <!-- PointCloud to laserscan -->
        <remap from="cloud_in" to="pcl_ground_segmentation/cloud_remove_ground"/>
        <remap from="scan" to="$(arg lidar2d_topic)"/>
        <include file="$(find pointcloud_to_laserscan)/launch/pointcloud_to_laserscan.launch">
            <arg name="z_min" value="$(arg z_min_laser)"/>
            <arg name="frame_id"    value="$(arg laser_frame_id)"/>
        </include>

        <!-- Local Grid map -->
        <node pkg="tf" if="$(eval veh == '/')" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 odom map 100" />
        <node pkg="tf" unless="$(eval veh == '/')" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 $(arg veh)/odom $(arg veh)/map 100" />

        <remap from="scan_to_localmap/scan" to="$(arg lidar2d_topic)"/> 
        <remap from="scan_to_localmap/odom" to="$(arg odom_topic)"/> 
        <include file="$(find pcl_perception)/launch/local_map2d.launch">
            <arg name="cell_size"   value="$(arg cell_size)"/>
            <arg name="map_length"  value="$(arg map_length)"/>
            <arg name="sync_time"   value="$(arg sync_time)"/>
            <arg name="vehicle_size" value="$(arg vehicle_size_map)"/>
            <arg name="drift_x" value="$(arg drift_x)"/>
            <arg name="drift_y" value="$(arg drift_y)"/>
            <arg name="frame_period" value="$(arg frame_period)"/>
        </include>

        <!-- A star planning -->
        <remap from="path_planning/odom" to="$(arg odom_topic)"/>
        <remap from="path_planning/goal" to="/move_base_simple/goal"/>
        <remap from="path_planning/map" to="scan_to_localmap/map"/>
        <include file="$(find path_planning)/launch/path_planning.launch">
            <arg name="update_time" value="$(arg update_time)"/>
            <arg name="vehicle_size" value="$(arg vehicle_size_planning)"/>
            <arg name="local_cost" value="$(arg local_cost)"/>
            <arg name="complete_dis" value="$(arg complete_dis)"/>
        </include>

        <!-- PID Control-->
        <remap from="odometry/ground_truth" to="$(arg odom_topic)"/>
        <remap from="planning_path" to="path_planning/global_path"/>
        <remap from="subt_pid/cmd_vel" to="/cmd_vel"/>
        <remap from="arrive" to="path_planning/arrive"/>
        <include file="$(find control)/launch/pid_control.launch">
        </include>
    </group>
</launch>
